@page "/requestview"
@using BusinessLogic
@using UI.Publishers
@using MudBlazor.Extensions


<MudGrid>
    <MudItem xs="6" sm="6" md="6">
        <MudCard>
            <MudCardHeader Style="height: 22px; font-weight: bolder">
                <CardHeaderContent>
                    <MudText>Request</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="4" md="4">
                        <MudField Label="Requested Service" Variant="Variant.Outlined">@Request.RequestedService.ToDescriptionString()</MudField>
                    </MudItem>
                    <MudItem xs="4" md="4">
                        @*<MudTextField @bind-Value=@Request.Id Label="Request ID" Variant="Variant.Outlined" ReadOnly="true" />*@
                        <MudField Label="Request ID" Variant="Variant.Outlined">@Request.Id</MudField>
                    </MudItem>
                    <MudItem xs="4" md="4">
                        <MudField Label="Time Received" Variant="Variant.Outlined">@Request.TimeReceived.ToString("MM/dd/yyyy h:mm tt")</MudField>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="6" sm="6" md="6">
        <MudCard>
            <MudCardHeader Style="height: 22px; font-weight: bolder">
                <CardHeaderContent>
                    <MudText>Patient</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="4" md="4">
                        <MudTextField @bind-Value="@Request.MemberId" Label="Member ID" Variant="Variant.Outlined" ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="4" md="4">
                        <MudTextField @bind-Value="@Request.PatientFirstName" Label="First Name" Variant="Variant.Outlined" ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="4" md="4">
                        <MudTextField @bind-Value="@Request.PatientLastName" Label="Last Name" Variant="Variant.Outlined" ReadOnly="true" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="6" sm="6" md="6">
        <MudCard>
            <MudCardHeader Style="height: 22px; font-weight: bolder">
                <CardHeaderContent>
                    <MudText>Provider</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="4" md="4">
                        <MudTextField @bind-Value=@Request.ProviderFirstName Label="First Name" Variant="Variant.Outlined" ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="4" md="4">
                        <MudTextField @bind-Value=@Request.ProviderLastName Label="Last Name" Variant="Variant.Outlined" ReadOnly="true" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem>
        <MudButton @onclick="@SendApprovedAsync" Variant="Variant.Filled" Color="Color.Success">Approve</MudButton>
    </MudItem>
    <MudItem>
        <MudButton @onclick="@SendDeniedAsync" Variant="Variant.Filled" Color="Color.Error">Deny</MudButton>
    </MudItem>
</MudGrid>

@code {
    private readonly DecisionPublisher _decisionPublisher = new(Variables.DecisionHubSenderConnectionString);

    [Parameter]
    public RequestForService Request { get; set; }

    [Parameter]
    public EventCallback<RequestForService> RequestChanged { get; set; }

    private async Task SendApprovedAsync()
    {
        Request.Status = Status.Approved;
        await _decisionPublisher.SendDecidedRequestAsync(Request);
        await UpdateRequestAsync(null);
    }

    private async Task SendDeniedAsync()
    {
        Request.Status = Status.Denied;
        await _decisionPublisher.SendDecidedRequestAsync(Request);
        await UpdateRequestAsync(null);
    }

    private async Task UpdateRequestAsync(RequestForService rfs)
    {
        Request = rfs;
        await RequestChanged.InvokeAsync(Request);
        await InvokeAsync(StateHasChanged);
    }
}
